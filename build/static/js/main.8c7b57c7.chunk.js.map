{"version":3,"sources":["components/Title.js","components/Form.js","components/Cocktail.js","components/Random.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","React","Component","Form","onSubmit","this","props","getCocktail","type","name","placeholder","Cocktail","nameOfDrink","method","photo","src","border","width","height","align","error","Random","onClick","getRandom","document","body","style","backgroundColor","App","state","undefined","e","a","preventDefault","drink","target","elements","value","fetch","api_call","json","process_data","console","log","setState","drinks","strDrink","strInstructions","strDrinkThumb","err","Title","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAYeA,G,uLARP,OACI,6BACI,wBAAIC,UAAU,QAAd,mBACA,yF,GALKC,IAAMC,YCUZC,E,iLATP,OACI,0BAAMC,SAAUC,KAAKC,MAAMC,aACvB,2BAAOC,KAAK,OAAOC,KAAK,QAAQC,YAAY,kBAC5C,iDAFJ,S,GAHOT,IAAMC,WCcVS,E,iLAXP,OACI,6BACKN,KAAKC,MAAMM,aAAe,qCAAWP,KAAKC,MAAMM,YAAtB,KAC1BP,KAAKC,MAAMO,QAAU,uCAAaR,KAAKC,MAAMO,OAAxB,KACrBR,KAAKC,MAAMQ,OAAS,yBAAKC,IAAOV,KAAKC,MAAMQ,MAAOE,OAAO,IAAIC,MAAM,MAAMC,OAAO,MAAMC,MAAM,SAC5Fd,KAAKC,MAAMc,OAAS,sCAAYf,KAAKC,MAAMc,MAAvB,U,GAPdnB,IAAMC,WCOdmB,E,iLANP,OACA,4BAAQA,QAAM,EAACC,QAASjB,KAAKC,MAAMiB,WAAnC,wB,GAHatB,IAAMC,WCK3BsB,SAASC,KAAKC,MAAMC,gBAAkB,U,IA6EvBC,E,2MA1EbC,MAAQ,CACNjB,iBAAakB,EACbjB,YAAQiB,EACRhB,WAAOgB,EACPV,WAAOU,G,EAGTvB,Y,uCAAc,WAAOwB,GAAP,mBAAAC,EAAA,6DACZD,EAAEE,iBACIC,EAAQH,EAAEI,OAAOC,SAASF,MAAMG,MAF1B,SAGWC,MAAM,4DAAD,OAA6DJ,IAH7E,cAGNK,EAHM,gBAIeA,EAASC,OAJxB,OAINC,EAJM,OAKZ,IACMP,GACFQ,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZhC,YAAc6B,EAAaI,OAAO,GAAGC,SACrCjC,OAAS4B,EAAaI,OAAO,GAAGE,gBAChCjC,MAAQ2B,EAAaI,OAAO,GAAGG,cAC/B5B,MAAQ,MAIV,EAAKwB,SAAS,CACZhC,iBAAckB,EACdjB,YAASiB,EACThB,WAAOgB,EACPV,MAAQ,kCAKd,MAAM6B,GACJ,EAAKL,SAAS,CACZhC,iBAAckB,EACdjB,YAASiB,EACThB,WAAQgB,EACRV,MAAQ,0CA9BA,2C,wDAmCdG,U,uCAAY,WAAOQ,GAAP,iBAAAC,EAAA,6DACVD,EAAEE,iBADQ,SAEaK,MAAM,0DAFnB,cAEJC,EAFI,gBAGiBA,EAASC,OAH1B,OAGJC,EAHI,OAIVC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACRhC,YAAc6B,EAAaI,OAAO,GAAGC,SACrCjC,OAAS4B,EAAaI,OAAO,GAAGE,gBAChCjC,MAAQ2B,EAAaI,OAAO,GAAGG,cAC/B5B,MAAQ,KATJ,2C,8HAgBV,OACE,6BACE,kBAAC8B,EAAD,MACA,kBAAC,EAAD,CAAM3C,YAAaF,KAAKE,cACxB,kBAAC,EAAD,CAAQgB,UAAWlB,KAAKkB,YACxB,kBAAC,EAAD,CACAX,YAAaP,KAAKwB,MAAMjB,YACxBC,OAAQR,KAAKwB,MAAMhB,OACnBC,MAAOT,KAAKwB,MAAMf,MAClBM,MAASf,KAAKwB,MAAMT,a,GApEVnB,IAAMC,WCIJiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASjC,SAASkC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8c7b57c7.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Titles extends React.Component{\n    render(){\n        return(\n            <div>\n                <h1 className='back'>Cocktail Finder</h1>\n                <p>Search all the types of cocktails and get the recipe!</p>\n            </div>\n        );\n    }\n}\nexport default Titles;","import React from \"react\";\nclass Form extends React.Component{\n    render(){\n        return(\n            <form onSubmit={this.props.getCocktail}>\n                <input type=\"text\" name=\"drink\" placeholder=\"Drink Name...\"/>\n                <button>Get Cocktail!</button>>\n            </form>\n        );\n    }\n}\n\nexport default Form;","import React from \"react\";\n\nclass Cocktail extends React.Component{\n    render(){\n        return(\n            <div>\n                {this.props.nameOfDrink && <p> Name: {this.props.nameOfDrink} </p>}\n                {this.props.method && <p> Method: {this.props.method} </p>}\n                {this.props.photo && <img src = {this.props.photo} border=\"5\" width=\"500\" height=\"400\" align=\"left\"/>}\n                {this.props.error && <p> Error: {this.props.error} </p>}\n            </div>\n        );\n    }\n}\n\nexport default Cocktail;","import React from \"react\";\nclass Random extends React.Component{\n    render(){\n        return(\n        <button Random onClick={this.props.getRandom}>Random Cocktail!</button>\n        );\n    }\n}\n\nexport default Random;","import React from 'react';\nimport './App.css';\nimport Titles from \"./components/Title\";\nimport Form from \"./components/Form\";\nimport Cocktail from \"./components/Cocktail\";\nimport Random from \"./components/Random\";\ndocument.body.style.backgroundColor = '#D7BDE2';\n\nclass App extends React.Component{\n  state = {\n    nameOfDrink: undefined,\n    method: undefined,\n    photo: undefined, \n    error: undefined\n  }\n  \n  getCocktail = async (e) => {\n    e.preventDefault();\n    const drink = e.target.elements.drink.value;\n    const api_call = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${drink}`);\n    const process_data = await api_call.json();\n    try{\n      if (drink){\n        console.log(process_data);\n        this.setState({\n          nameOfDrink : process_data.drinks[0].strDrink,\n          method : process_data.drinks[0].strInstructions,\n          photo : process_data.drinks[0].strDrinkThumb,\n          error : \"\"\n        });\n      }\n      else{\n        this.setState({\n          nameOfDrink : undefined,\n          method : undefined,\n          photo: undefined,\n          error : \"Please enter name of drink...\"\n        });\n      }\n      \n    }\n    catch(err){\n      this.setState({\n        nameOfDrink : undefined,\n        method : undefined,\n        photo : undefined,\n        error : \"The name you entered was not found...\"\n      });\n    }\n    \n  }\n  getRandom = async (e) => {\n    e.preventDefault();\n    const api_call = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/random.php`);\n    const process_data = await api_call.json();\n    console.log(process_data);\n    this.setState({\n          nameOfDrink : process_data.drinks[0].strDrink,\n          method : process_data.drinks[0].strInstructions,\n          photo : process_data.drinks[0].strDrinkThumb,\n          error : \"\"\n        });\n     \n    }\n    \n  \n  render(){\n    return(\n      <div>\n        <Titles/>\n        <Form getCocktail={this.getCocktail}/>\n        <Random getRandom={this.getRandom}/>\n        <Cocktail \n        nameOfDrink={this.state.nameOfDrink}\n        method={this.state.method}\n        photo={this.state.photo}\n        error = {this.state.error}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}